<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd" 
	default-lazy-init="true" >
	
	<!-- 
		Usado para resolver problema com inicialização dos mapper no mybatis
		onde o mybatis tentava inicializar o datasource antes de injetar o project.properties
	  -->
	<util:properties id="p"  location="classpath:project.properties"  />
	<!-- 	<context:property-placeholder location="classpath:project.properties"  /> -->
	<jpa:repositories base-package="br.com.tethys.labnascimento.dao.postgres"
	 	entity-manager-factory-ref="postgresEntityManagerFactory"
	 	transaction-manager-ref="postgresTransactionManager" />
	<jpa:repositories base-package="br.com.tethys.labnascimento.security.dao"
	 	entity-manager-factory-ref="postgresEntityManagerFactory"
	 	transaction-manager-ref="postgresTransactionManager" />	 	

	<tx:annotation-driven  />
	<bean id="persistenceExceptionTranslationPostProcessor" class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<bean id="postgresDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!-- access -->
		<property name="driverClass" value="org.postgresql.Driver" />
		<property name="jdbcUrl" value="#{p['postgres.url']}" />
		<property name="user" value="#{p['postgres.username']}" />
		<property name="password" value="#{p['postgres.password']}" />
		<!-- pool sizing -->
		<property name="initialPoolSize" value="1" />
		<property name="minPoolSize" value="1" />
		<property name="maxPoolSize" value="10" />
		<property name="acquireIncrement" value="1" />
		<property name="maxStatements" value="0" />
		<!-- retries -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="acquireRetryDelay" value="1000" /> <!-- 1s -->
		<property name="breakAfterAcquireFailure" value="false" />
		<!-- refreshing connections -->
		<property name="maxIdleTime" value="180" /> <!-- 3min -->
		<property name="maxConnectionAge" value="10" /> <!-- 1h -->
		<!-- timeouts and testing -->
		<property name="checkoutTimeout" value="30000" /> <!-- 30s -->
		<property name="idleConnectionTestPeriod" value="60" /> <!-- 60 -->
		<property name="testConnectionOnCheckout" value="true" />
		<property name="preferredTestQuery" value="SELECT 1" />
	    <property name="testConnectionOnCheckin" value="true" />
	</bean>
	
	<bean id="postgresEntityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" depends-on="postgresDataSource"
		destroy-method="destroy">
		<property name="dataSource" ref="postgresDataSource" />
		<property name="persistenceUnitName" value="postgresPU" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.show_sql">#{p['jpa.show_sql']}</prop>
				<prop key="cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
				<prop key="hibernate.format_sql">#{p['jpa.format_sql']}</prop>
				<prop key="hibernate.generate_statistics">false</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>br.com.tethys.labnascimento.entity.postgres</value>
				<value>br.com.tethys.labnascimento.security.entity</value>
			</list>
		</property>
	</bean>
	<bean id="postgresTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="postgresEntityManagerFactory" />
	</bean>
	<!-- Transaction template para gerenciamento programatico de transações -->
	<bean id="postgresTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate" lazy-init="true">
	  	<property name="transactionManager" ref="postgresTransactionManager" />
	</bean>
	<!-- Mybatis Postgres SQL Factory -->
	<bean id="postgresSqlFactory" class="org.mybatis.spring.SqlSessionFactoryBean" depends-on="postgresEntityManagerFactory" lazy-init="true">
	  <property name="dataSource" ref="postgresDataSource" />
	  <property name="configLocation" value="classpath:mybatis/mybatis-postgres-config.xml" />
	  <property name="mapperLocations" value="classpath:mybatis/postgres/*.xml"></property>
	</bean>
	<bean id="postgresSqlSession"
		 factory-bean="postgresSqlFactory"
		 factory-method="openSession"
		 class="org.apache.ibatis.session.SqlSession"
		 destroy-method="close"
		 depends-on="postgresSqlFactory"
	 />	 
	 
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" depends-on="postgresSqlFactory"   >
	 	<property name="sqlSessionFactory" ref="postgresSqlFactory"  />
	    <property name="basePackage" value="br.com.tethys.labnascimento.dao.mappers.postgres" />
	 </bean>	
</beans>